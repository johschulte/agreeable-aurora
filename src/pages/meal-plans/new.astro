---
// Speiseplan-Erstellungsseite - Zum Starten der Erstellung eines neuen Essensplans (FR010)
import RecipeLayout from "../../layouts/RecipeLayout.astro";
import { createMealPlan } from "../../utils/db-recipe.js";

// Diese Seite wird nicht vorgerendert, sondern für jede Anfrage serverseitig gerendert
export const prerender = false;

// Benutzer-ID für den in der Datenbank vorhandenen Benutzer
const userId = "ccce9083-2af5-49cf-90e4-f6e4d6e3fb98"; // test@example.com

// Heutige Datum im Format YYYY-MM-DD berechnen
const today = new Date().toISOString().slice(0, 10);

// Datum in einer Woche (Standard für Enddatum) im Format YYYY-MM-DD berechnen
const nextWeek = new Date();
nextWeek.setDate(nextWeek.getDate() + 6); // 7 Tage (inkl. heute)
const nextWeekFormatted = nextWeek.toISOString().slice(0, 10);

// Variablen für das Formular und Nachrichten
let formSubmitted = false;
let errorMessage = null;
let successMessage = null;
let redirectUrl = null;

// Formular verarbeiten
if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();
    
    // Grundlegende Daten extrahieren
    const name = formData.get("name")?.toString().trim();
    const startDate = formData.get("start_date")?.toString();
    const endDate = formData.get("end_date")?.toString();
    const includedMeals = formData.getAll("meals").map(meal => meal.toString());
    
    // Validierung
    if (!name) {
      throw new Error("Bitte gib einen Namen für deinen Speiseplan ein.");
    }
    
    if (!startDate) {
      throw new Error("Bitte wähle ein Startdatum.");
    }
    
    if (!endDate) {
      throw new Error("Bitte wähle ein Enddatum.");
    }
    
    if (includedMeals.length === 0) {
      throw new Error("Bitte wähle mindestens eine Mahlzeit aus.");
    }
    
    // Datumsvalidierung: Enddatum muss nach Startdatum sein
    const startDateObj = new Date(startDate);
    const endDateObj = new Date(endDate);
    
    if (endDateObj < startDateObj) {
      throw new Error("Das Enddatum muss nach dem Startdatum liegen.");
    }
    
    // Speiseplan in der Datenbank erstellen
    const mealPlanData = {
      user_id: userId,
      name,
      start_date: startDate,
      end_date: endDate,
      meal_types: includedMeals,
      is_generated: false,
    };
    
    console.log("Erstelle Speiseplan:", mealPlanData);
    
    const mealPlan = await createMealPlan(
      userId,
      name,
      startDate,
      endDate,
      includedMeals
    );
    
    // Erfolgreich - leite zur Rezeptauswahl (Swipe) weiter
    successMessage = "Speiseplan erfolgreich erstellt!";
    redirectUrl = `/meal-plans/${mealPlan.id}/select-recipes`;
    
    // Umleitung nach kurzer Verzögerung
    if (redirectUrl) {
      return Astro.redirect(redirectUrl, 303);
    }
    
  } catch (error) {
    console.error("Fehler beim Erstellen des Speiseplans:", error);
    errorMessage = `Es gab ein Problem beim Erstellen des Speiseplans: ${error.message}`;
  }
}

// Verfügbare Mahlzeiten
const availableMeals = [
  { id: "breakfast", name: "Frühstück" },
  { id: "lunch", name: "Mittagessen" },
  { id: "dinner", name: "Abendessen" },
  { id: "snack", name: "Snack" }
];
---

<RecipeLayout title="Neuer Speiseplan">
  <div class="container mx-auto px-4 py-8 max-w-3xl">
    <div class="flex justify-between items-center mb-8">
      <h1 class="text-2xl font-bold text-gray-900 dark:text-gray-100">
        Neuen Speiseplan erstellen
      </h1>
      <a
        href="/meal-plans"
        class="text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100"
      >
        Zurück zur Übersicht
      </a>
    </div>

    {successMessage && (
      <div class="bg-green-100 dark:bg-green-900/20 border border-green-200 dark:border-green-800 text-green-800 dark:text-green-200 rounded-lg p-4 mb-6">
        {successMessage}
      </div>
    )}

    {errorMessage && (
      <div class="bg-red-100 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-800 dark:text-red-200 rounded-lg p-4 mb-6">
        {errorMessage}
      </div>
    )}

    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm p-6">
      <p class="text-gray-600 dark:text-gray-400 mb-6">
        Lege den Zeitraum und die Mahlzeiten fest, die in deinem Speiseplan enthalten sein sollen.
      </p>

      <form method="POST" class="space-y-6">
        <!-- Name des Speiseplans -->
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Name des Speiseplans <span class="text-red-500">*</span>
          </label>
          <input
            type="text"
            id="name"
            name="name"
            required
            placeholder="z.B. Wochenplan KW 20"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-emerald-500 focus:border-emerald-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
          />
        </div>

        <!-- Zeitraum -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label for="start_date" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Startdatum <span class="text-red-500">*</span>
            </label>
            <input
              type="date"
              id="start_date"
              name="start_date"
              required
              value={today}
              min={today}
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-emerald-500 focus:border-emerald-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
            />
          </div>
          <div>
            <label for="end_date" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
              Enddatum <span class="text-red-500">*</span>
            </label>
            <input
              type="date"
              id="end_date"
              name="end_date"
              required
              value={nextWeekFormatted}
              min={today}
              class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-emerald-500 focus:border-emerald-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
            />
          </div>
        </div>

        <!-- Mahlzeiten auswählen -->
        <div>
          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
            Zu planende Mahlzeiten <span class="text-red-500">*</span>
          </label>
          <div class="grid grid-cols-2 md:grid-cols-4 gap-3">
            {availableMeals.map(meal => (
              <label class="flex items-center space-x-2 border border-gray-300 dark:border-gray-600 rounded-md p-3 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700">
                <input
                  type="checkbox"
                  name="meals"
                  value={meal.id}
                  class="h-4 w-4 text-emerald-600 focus:ring-emerald-500 border-gray-300 dark:border-gray-600 rounded"
                  checked={meal.id === "lunch" || meal.id === "dinner"}
                />
                <span class="text-gray-700 dark:text-gray-300">{meal.name}</span>
              </label>
            ))}
          </div>
        </div>

        <button
          type="submit"
          class="w-full px-4 py-3 bg-emerald-600 hover:bg-emerald-700 text-white rounded-md font-medium transition-colors"
        >
          Weiter zur Rezeptauswahl
        </button>
      </form>
    </div>
  </div>
</RecipeLayout>

<script>
  // Client-seitige Validierung und UX-Verbesserungen
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.querySelector('form');
    const startDateInput = document.getElementById('start_date');
    const endDateInput = document.getElementById('end_date');
    const mealCheckboxes = document.querySelectorAll('input[name="meals"]');
    
    // Stelle sicher, dass das Enddatum immer nach dem Startdatum liegt
    if (startDateInput && endDateInput) {
      startDateInput.addEventListener('change', () => {
        if (endDateInput.value && new Date(endDateInput.value) < new Date(startDateInput.value)) {
          // Setze das Enddatum auf das Startdatum + 6 Tage (7-Tage-Plan)
          const newEndDate = new Date(startDateInput.value);
          newEndDate.setDate(newEndDate.getDate() + 6);
          endDateInput.value = newEndDate.toISOString().slice(0, 10);
        }
        
        // Aktualisiere das Minimum für das Enddatum
        endDateInput.min = startDateInput.value;
      });
    }
    
    // Stelle sicher, dass mindestens eine Mahlzeit ausgewählt ist
    if (form) {
      form.addEventListener('submit', (e) => {
        const checkedMeals = Array.from(mealCheckboxes).filter(cb => cb.checked);
        if (checkedMeals.length === 0) {
          e.preventDefault();
          alert('Bitte wähle mindestens eine Mahlzeit aus.');
        }
      });
    }
  });
</script>