---
// RecipeCard-Komponente für die Anzeige von Rezepten in Übersichten
// Implementiert Teil der Anforderung FR007 (Rezeptbibliothek anzeigen)

interface Recipe {
  id: string;
  title: string;
  image?: string;
  image_path?: string; // Unterstützung für beide Bildeigenschaften
  prepTime?: number;
  cookTime?: number;
  prep_time_minutes?: number; // Unterstützung für beide Zeitproperties
  cook_time_minutes?: number;
  tags?: { id: string; name: string; color?: string }[];
}

interface Props {
  recipe: Recipe;
  compact?: boolean; // Kompakte Ansicht für Essensplan
}

const { recipe, compact = false } = Astro.props;

// Standardbild, falls kein Rezeptbild vorhanden ist
const defaultImage = "/images/recipe-placeholder.jpg";

// Bild-Pfad aus verschiedenen möglichen Properties
const imagePath = recipe.image_path || recipe.image || defaultImage;

// Gesamtzeit berechnen - unterstützt beide Namenskonventionen
const prepTime = recipe.prepTime || recipe.prep_time_minutes || 0;
const cookTime = recipe.cookTime || recipe.cook_time_minutes || 0;
const totalTime = prepTime + cookTime;

// Zeitanzeige formatieren
function formatTime(minutes: number): string {
  if (minutes < 60) {
    return `${minutes} Min.`;
  }
  const hours = Math.floor(minutes / 60);
  const remainingMinutes = minutes % 60;

  if (remainingMinutes === 0) {
    return `${hours} Std.`;
  }

  return `${hours} Std. ${remainingMinutes} Min.`;
}
---

<a
  href={`/recipes/${recipe.id}`}
  class={`group block overflow-hidden transition-all duration-300 ${compact ? "h-full" : "h-full"}`}
>
  <div
    class={`bg-white dark:bg-gray-700 rounded-lg shadow-sm h-full flex flex-col hover:shadow-md transition-shadow ${compact ? "p-2" : "p-0"}`}
  >
    <!-- Bild -->
    <div
      class={`relative ${compact ? "h-24" : "h-40"} overflow-hidden rounded-t-lg`}
    >
      <img
        src={imagePath}
        alt={recipe.title}
        class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
        loading="lazy"
        onerror="this.onerror=null; this.src='/images/recipe-placeholder.jpg';"
      />

      <!-- Zeit-Badge -->
      {
        totalTime > 0 && (
          <div class="absolute bottom-2 right-2 bg-white/90 dark:bg-gray-800/90 text-gray-700 dark:text-gray-200 rounded-full px-2 py-1 text-xs font-semibold flex items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
              fill="currentColor"
              class="w-4 h-4 mr-1"
            >
              <path
                fill-rule="evenodd"
                d="M12 2.25c-5.385 0-9.75 4.365-9.75 9.75s4.365 9.75 9.75 9.75 9.75-4.365 9.75-9.75S17.385 2.25 12 2.25zM12.75 6a.75.75 0 00-1.5 0v6c0 .414.336.75.75.75h4.5a.75.75 0 000-1.5h-3.75V6z"
                clip-rule="evenodd"
              />
            </svg>
            {formatTime(totalTime)}
          </div>
        )
      }
    </div>

    <!-- Inhalt -->
    <div class="flex flex-col flex-grow p-4">
      <h3
        class={`font-semibold text-gray-800 dark:text-gray-100 mb-2 line-clamp-2 ${compact ? "text-sm" : "text-lg"}`}
      >
        {recipe.title}
      </h3>

      {
        !compact && recipe.tags && recipe.tags.length > 0 && (
          <div class="mt-auto pt-2 flex flex-wrap gap-1">
            {recipe.tags.slice(0, 3).map((tag) => (
              <span
                class={`inline-block px-2 py-1 rounded-full text-xs bg-emerald-50 dark:bg-emerald-900/30 text-emerald-800 dark:text-emerald-300`}
              >
                {tag.name}
              </span>
            ))}

            {recipe.tags.length > 3 && (
              <span class="inline-block px-2 py-1 rounded-full text-xs bg-gray-100 dark:bg-gray-600 text-gray-600 dark:text-gray-300">
                +{recipe.tags.length - 3}
              </span>
            )}
          </div>
        )
      }
    </div>
  </div>
</a>
